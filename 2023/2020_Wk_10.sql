-- Techniques:
-- 1. Recursive Common Table Expressions 
-- 2. Data Scaffolding 
-- 3. Setting Variables

-- Aggregate the data so we have a single balance for each day already in the dataset, for each account
-- Scaffold the data so each account has a row between 31st Jan and 14th Feb (hint)
-- Make sure new rows have a null in the Transaction Value field
-- Create a parameter so a particular date can be selected
-- Filter to just this date

SET SELECTED_DATE = '2023-02-01';

WITH INCOMING AS(
    SELECT P.*EXCLUDE(ACCOUNT_TO,ACCOUNT_FROM, TRANSACTION_ID), D.*EXCLUDE(CANCELLED_), A.*
    FROM pd2023_wk07_transaction_path as P
    INNER JOIN pd2023_wk07_transaction_detail AS D ON P.TRANSACTION_ID = D.TRANSACTION_ID
    INNER JOIN pd2023_wk07_account_information AS A ON P.ACCOUNT_TO = A.ACCOUNT_NUMBER
    WHERE CANCELLED_ = 'N'
    )

, OUTGOING AS(
    SELECT P.*EXCLUDE(ACCOUNT_TO,ACCOUNT_FROM, TRANSACTION_ID), D.*EXCLUDE(VALUE,CANCELLED_), -D.VALUE AS VALUE, A.*
    FROM pd2023_wk07_transaction_path as P
    INNER JOIN pd2023_wk07_transaction_detail AS D ON P.TRANSACTION_ID = D.TRANSACTION_ID
    INNER JOIN pd2023_wk07_account_information AS A ON P.ACCOUNT_FROM = A.ACCOUNT_NUMBER
    WHERE CANCELLED_ = 'N'
    )

, ALL_TRANSACTIONS AS(
    SELECT ACCOUNT_NUMBER, TRANSACTION_DATE AS BALANCE_DATE, VALUE AS TRANSACTION_VALUE, NULL AS BALANCE
    FROM INCOMING
    UNION ALL 
    SELECT ACCOUNT_NUMBER, TRANSACTION_DATE AS BALANCE_DATE, VALUE AS TRANSACTION_VALUE, NULL 
    FROM OUTGOING
    UNION ALL
    SELECT ACCOUNT_NUMBER, BALANCE_DATE, NULL, BALANCE
    FROM pd2023_wk07_account_information
    )

, ACCOUNT_NUMBERS AS(
SELECT DISTINCT ACCOUNT_NUMBER
FROM ALL_TRANSACTIONS
)

, DATES AS(
SELECT DATE('2023-01-31') AS BALANCE_DATE, ACCOUNT_NUMBER
FROM ACCOUNT_NUMBERS

UNION ALL

SELECT DATEADD('day',1,BALANCE_DATE) AS BALANCE_DATE, ACCOUNT_NUMBER
FROM DATES
WHERE BALANCE_DATE < DATE('2023-02-14')

)

, RANKED_TRANSACTIONS AS(
    SELECT DATES.ACCOUNT_NUMBER,DATES.BALANCE_DATE,ALL_TRANSACTIONS.*EXCLUDE(BALANCE_DATE,ACCOUNT_NUMBER),
    RANK() OVER(PARTITION 
    BY DATES.ACCOUNT_NUMBER 
    ORDER BY DATES.BALANCE_DATE ASC, TRANSACTION_VALUE DESC ) 
    AS RANK,
    FROM ALL_TRANSACTIONS
    RIGHT JOIN DATES ON DATES.ACCOUNT_NUMBER = ALL_TRANSACTIONS .ACCOUNT_NUMBER
    AND DATES.BALANCE_DATE = ALL_TRANSACTIONS .BALANCE_DATE
    )

, Wk_9 AS(
SELECT *EXCLUDE(RANK, BALANCE),
SUM(COALESCE(TRANSACTION_VALUE, BALANCE)) OVER (
            PARTITION BY ACCOUNT_NUMBER 
            ORDER BY RANK 
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
        ) AS BALANCE
FROM RANKED_TRANSACTIONS)

SELECT ACCOUNT_NUMBER, SUM(TRANSACTION_VALUE) AS TRANSACTION_VALUE, SUM(BALANCE) AS BALANCE
FROM Wk_9
WHERE BALANCE_DATE = $SELECTED_DATE
GROUP BY BALANCE_DATE, ACCOUNT_NUMBER
